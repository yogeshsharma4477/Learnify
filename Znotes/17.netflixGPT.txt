// e.preventDefault()
// create new project in firebase
// after creating project -> click on create a web project (it will register a app for you)
// follow the firebase steps -> app nickname -> add firebase sdk -> npm install firebase -> add configuration
// firebase CLI -> npm install -g firebase-tools
// deploy to firebase hosting -> 
    >firebase login 
    >firebase init
        it will ask some configuration
        also ask the public directory you need to add build
        and some more configuration read and select accordling 
    >firebase deploy
    there are two to deploy 1. from local using > firebase deploy
                            2. once our code is pushed to github it will automatically hosting

// to deploy 
    1. npm run build
    2. firebase deploy
    it will give the live hosting url


onAuthChange - it is kind of event it will trigger when user sign in or sign out automatically it will trigger
const auth = getAuth();
onAuthStateChanged(auth, (user) => {
  if (user) {
    // User is signed in, see docs for a list of available properties
    // https://firebase.google.com/docs/reference/js/auth.user
    const uid = user.uid;
    // ...
  } else {
    // User is signed out
    // ...
  }
});



createUserWithEmailAndPassword(auth, email, password)
  .then((userCredential) => {
    // Signed up 
    const user = userCredential.user;
    // ...
  })
  .catch((error) => {
    const errorCode = error.code;
    const errorMessage = error.message;
    // ..
  });


signInWithEmailAndPassword(auth, email, password)
  .then((userCredential) => {
    // Signed in 
    const user = userCredential.user;
    // ...
  })
  .catch((error) => {
    const errorCode = error.code;
    const errorMessage = error.message;
  });
  
  
  import { getAuth, signOut } from "firebase/auth";

const auth = getAuth();
signOut(auth).then(() => {
  // Sign-out successful.
  navigate("/")
  clear user from store
}).catch((error) => {
  // An error happened.
});


firebase provide multiple API to manage user ex. updateProfile, getuser etc. 
it is like a server it provide backend storage etc

TMDM API to fetch movie
it gives you token, better authentication, free API


Q. Restrict the user to access url if not logged in
>1. on every page check on serverside if user is loggedin or not 
>2. on aap.js/index.js/header.js bcz header will always be there(entry point) file check if user is loggedin or not


Q. constant.js
> all the hardcode value, string or default values should be in our constant file


Q. TMDB
> register your app, get API KEy, AccessToken, read doc


Q. why does react render 2 time in local env bcoz of strict mode?
> react does extra rendering just to check for some inconsistency in your app and it only happen in dev mode

Q. CUSTOM HOOKS - normal js function 
> ex. usenowplayingMovie will fetch the data and update the store 
      instead of writing in all the logic in one componet use custom hook
      
// spend time in planning the ui in mind then start writing code

Q. embed code from youtube to add in your code to play yt video
> <iframe width="560" height="315" src="https://www.youtube.com/embed/v4hs1lqGuT8?si=ocNtdHd-eqFPFgAB" title="YouTube video player" 					frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>



Q. GPT
> chatGPT is an interface on top of that GPT API
> GPT is the background thing


Q. npm i --save openai 
> import OpenAI from 'openai';

const openai = new OpenAI({
  apiKey: 'My API Key', // defaults to process.env["OPENAI_API_KEY"]
});

async function main() {
  let gptQuery = "act as a movie recommendation system and suggest some movies for the query" + USERSearch + "only give me 5 movies comma seperated like example result given ahead. Example Result:sholya, don, golmaal, koi mil gaya"
  const chatCompletion = await openai.chat.completions.create({
    messages: [{ role: 'user', content: gptQuery }],
    model: 'gpt-3.5-turbo',
  });
  
  console.log(chatCompletion.choices) // this will all the suggestion
}


main();
// it is not the best practice to directly call from client side best way is to call from node 
// bydefault it doesn't all to use from client side
// chatCompletion.choices -> whatever this will give response find in searchAPI to search movie


NOte: everything should be store didn't create state
      custom hook
      early return
      constant file























